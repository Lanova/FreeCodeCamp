function tokenize(str, sep, esc) {
  let result = [];
  let temp = "";

  for (let i = 0; i < str.length; i++) {
    if (str[i] == esc) {// if char == escape element
      temp += str[i + 1]; //add to temp str next element
      i++; // icrease i to not take again the next element for evaluation
    }
    else if (str[i] == sep) { //if char = separetor
      result.push(temp) // push acumulated temp str to arr
      temp = ""; //reset string
    }
    else {
      temp += str[i]; //if it's normal char/num add to temp str
    }

  }
  result.push(temp) // add last acumulated value or empty str to arr from temp
  return result;

}


console.log(
  tokenize('one^|uno||three^^^^|four^^^|^cuatro|', '|', '^'))


//   Rosetta Code: Tokenize a string with escaping
// Write a function or program that can split a string at each non-escaped occurrence of a separator character.

// It should accept three input parameters:

// The string
// The separator character
// The escape character
// It should output a list of strings.

// Rules for splitting:

// The fields that were separated by the separators, become the elements of the output list.
// Empty fields should be preserved, even at the start and end.
// Rules for escaping:

// "Escaped" means preceded by an occurrence of the escape character that is not already escaped itself.
// When the escape character precedes a character that has no special meaning, it still counts as an escape (but does not do anything special).
// Each occurrences of the escape character that was used to escape something, should not become part of the output.
// Demonstrate that your function satisfies the following test-case:

// Given the string

// one^|uno||three^^^^|four^^^|^cuatro|
// and using | as a separator and ^ as escape character, your function should output the following array:

//   ['one|uno', '', 'three^^', 'four^|cuatro', '']