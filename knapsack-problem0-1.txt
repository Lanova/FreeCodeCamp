function knapsack(items, maxweight) {
  let sum = 0;
  let value = 0;
  let count = 0;
  var myObject = new Object(items);

  for (let i = 0; i < myObject.length; i++) {
    myObject[i]["perOne"] = (myObject[i].value / myObject[i].weight).toFixed(2);
  }

  myObject.sort((a, b) => b.perOne - a.perOne);

  for (let i = 0; i < myObject.length && sum < (maxweight - myObject[i].weight); i++) {
    sum += myObject[i].weight;
    value += myObject[i].value;
    count++;
  }

  myObject = myObject.splice(count, myObject.length);

  if (myObject.length > 0) {
    myObject.sort((a, b) => b.value - a.value);

    for (let i = 0; i < myObject.length; i++) {
        if (myObject[i].weight < (maxweight - sum)) {
        sum += myObject[i].weight;
        value += myObject[i].value;
      }
    }
  }

  return value;

}

// Rosetta Code: Knapsack problem/0-1
// The 0-1 knapsack problem is defined as follows:
// You are given an array of objects representing items to be put in a knapsack. The objects have 3 attributes: name, weight, and value. The items need to be selected so that the total weight does not exceed the maximum weight and the value is maximized.

knapsack([{ name:'map', weight:9, value:150 }, { name:'compass', weight:13, value:35 }, { name:'water', weight:153, value:200 }, { name:'sandwich', weight:50, value:160 }, { name:'glucose', weight:15, value:60 }, { name:'tin', weight:68, value:45 }, { name:'banana', weight:27, value:60 }, { name:'apple', weight:39, value:40 }], 100)
// should return 405