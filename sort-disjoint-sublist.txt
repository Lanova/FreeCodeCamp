function sortDisjoint(values, indices) {
  let pickedValue = [];// value selected by indexes
  indices.sort((a, b) => a - b); //sort indexes

  for (let i = 0; i < indices.length; i++) {
    pickedValue.push(values[indices[i]]); //store value by givrn indexes
  }

  pickedValue.sort((a, b) => a - b);//sort values

  for (var i = 0; i < indices.length; i++) {
    values[indices[i]] = pickedValue.shift();//insert into array in given position the first sorted selected value 
  }

  console.log(values)
  return values;

}
sortDisjoint([6, 1, 7, 1, 3, 5, 6], [6, 1, 5, 4])

// Rosetta Code: Sort disjoint sublist
// Given a list of values and a set of integer indices into that value list, the task is to sort the values at the given indices, but preserving the values at indices outside the set of those to be sorted.

// Make your function work with the following list of values and set of indices:
// values: [7, 6, 5, 4, 3, 2, 1, 0]
// indices(0-based): {6, 1, 7}
// Where the correct result would be:
// [7, 0, 5, 4, 3, 2, 1, 6].